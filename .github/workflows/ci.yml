name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 2 * * *'

jobs:
  detect-roles:
    runs-on: ubuntu-latest
    outputs:
      baseline: ${{ steps.detect.outputs.baseline }}
      additional: ${{ steps.detect.outputs.additional }}
      impacted: ${{ steps.detect.outputs.impacted }}
      all_roles: ${{ steps.detect.outputs.all_roles }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Detect roles
        id: detect
        run: |
          python scripts/detect_impacted_roles.py > roles.json
          python - <<'PY'
          import json
          import os

          with open("roles.json", "r", encoding="utf-8") as fh:
              data = json.load(fh)

          out = os.environ["GITHUB_OUTPUT"]
          with open(out, "a", encoding="utf-8") as fh:
              fh.write(f"baseline={data['baseline']}\n")
              fh.write(f"additional={json.dumps(data['additional'])}\n")
              fh.write(f"impacted={json.dumps(data['impacted'])}\n")
              fh.write(f"all_roles={json.dumps(data['all_roles'])}\n")
              fh.write(f"matrix={json.dumps(data['matrix'])}\n")
          PY
      - name: Summarize roles
        run: |
          python - <<'PY' >> "$GITHUB_STEP_SUMMARY"
          import json

          with open("roles.json", "r", encoding="utf-8") as fh:
              data = json.load(fh)

          baseline = data["baseline"]
          additional = data["additional"]
          impacted = data["impacted"]
          all_roles = data.get("all_roles", [])

          print(f"Baseline role (full suite): {baseline}")
          if additional:
              print(f"Additional targeted roles: {', '.join(additional)}")
          else:
              print("Additional targeted roles: none")

          if set(impacted) == set(all_roles) and all_roles:
              print("Full matrix will run for this build.")
          elif impacted:
              print(f"Impacted roles: {', '.join(impacted)}")
          PY
      - name: Comment roles
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          BASELINE: ${{ steps.detect.outputs.baseline }}
          IMPACTED: ${{ steps.detect.outputs.impacted }}
          ADDITIONAL: ${{ steps.detect.outputs.additional }}
          ALL_ROLES: ${{ steps.detect.outputs.all_roles }}
        with:
          script: |
            const baseline = process.env.BASELINE;
            const impacted = JSON.parse(process.env.IMPACTED || '[]');
            const additional = JSON.parse(process.env.ADDITIONAL || '[]');
            const allRoles = JSON.parse(process.env.ALL_ROLES || '[]');

            let body = `Baseline role (full suite): ${baseline}\n`;
            if (additional.length) {
              body += `Additional targeted roles: ${additional.join(', ')}\n`;
            } else {
              body += 'No additional targeted roles detected.\n';
            }

            const impactedSet = new Set(impacted);
            const fullMatrix = allRoles.length && allRoles.every(role => impactedSet.has(role));

            if (fullMatrix) {
              body += 'Full matrix will run for this build.';
            } else if (impacted.length) {
              body += `Impacted roles: ${impacted.join(', ')}`;
            }
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body
            });
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Gitleaks
        run: |
          set -eo pipefail
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz \
            -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo install gitleaks /usr/local/bin/gitleaks
      - name: Scan working tree for secrets
        run: |
          set -eo pipefail
          gitleaks detect --no-git --source . --config .gitleaks.toml --redact --no-banner
      - name: Scan git history for secrets
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_BASE_REF: ${{ github.event.pull_request.base.ref || '' }}
          GITLEAKS_HISTORY_RANGE: ${{ github.event_name == 'pull_request' && format('{0}..{1}', github.event.pull_request.base.sha, github.event.pull_request.head.sha) || (github.event_name == 'push' && format('{0}..{1}', github.event.before, github.sha) || '') }}
        run: |
          set -eo pipefail
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ] && [ -n "$PR_BASE_REF" ]; then
            git fetch --no-tags --prune --depth=0 origin "$PR_BASE_REF"
          fi
          LOG_OPTS="--no-merges"
          if [ -n "$GITLEAKS_HISTORY_RANGE" ] && git rev-list $GITLEAKS_HISTORY_RANGE >/dev/null 2>&1; then
            LOG_OPTS="$LOG_OPTS $GITLEAKS_HISTORY_RANGE"
          else
            LOG_OPTS="$LOG_OPTS --max-count=200"
          fi
          gitleaks detect --source . --config .gitleaks.toml --redact --no-banner --log-opts="$LOG_OPTS"
  tests:
    needs: detect-roles
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-roles.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest psycopg-binary
      - name: Run tests
        env:
          NODE_ROLE: ${{ matrix.role }}
        run: |
          if [ "${{ matrix.role_only }}" = "true" ]; then
            export NODE_ROLE_ONLY=1
          fi
          pytest -q

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

  check-migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Check for missing migrations
        run: |
          python manage.py makemigrations --check --dry-run --noinput

  env-refresh:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run env refresh
        run: ./env-refresh.sh --clean

  container-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build container image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --tag arthexis-ci:latest \
            --file Dockerfile \
            --load \
            .
      - name: Cache Trivy database
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('Dockerfile', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-trivy-
      - name: Scan container image
        uses: aquasecurity/trivy-action@v0
        with:
          scan-type: 'image'
          image-ref: arthexis-ci:latest
          severity: 'HIGH,CRITICAL'
          vuln-type: 'os,library'
          format: 'table'
          exit-code: '1'
          cache-dir: ~/.cache/trivy

  ui-screenshots:
    needs: detect-roles
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Firefox
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox firefox-geckodriver
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Run screenshot specs
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          python scripts/ci/run_screenshots.py --base-ref "${GITHUB_BASE_REF}" --output-dir artifacts/ui-screens $(if [ "${GITHUB_EVENT_NAME}" != "pull_request" ]; then echo "--run-all"; fi)
      - name: Upload screenshot artefacts
        uses: actions/upload-artifact@v3
        with:
          name: ui-screenshots
          path: artifacts/ui-screens

