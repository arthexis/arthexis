name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 2 * * *'

jobs:
  node-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.plan.outputs.matrix }}
      database_changed: ${{ steps.plan.outputs.database_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Build node test matrix
        id: plan
        run: |
          python scripts/build_node_ci_plan.py > plan.json
          python - <<'PY'
          import json
          import os

          with open('plan.json', 'r', encoding='utf-8') as fh:
              data = json.load(fh)

          matrix = json.dumps(data['matrix'])
          database_changed = 'true' if data.get('database_changed') else 'false'

          output = os.environ['GITHUB_OUTPUT']
          with open(output, 'a', encoding='utf-8') as fh:
              fh.write(f"matrix={matrix}\n")
              fh.write(f"database_changed={database_changed}\n")

          summary = os.environ.get('GITHUB_STEP_SUMMARY')
          if summary:
              with open(summary, 'a', encoding='utf-8') as fh:
                  fh.write('| Node role | Enabled features |\n')
                  fh.write('| --- | --- |\n')
                  for entry in data['matrix']:
                      features = entry['features'] or 'baseline only'
                      fh.write(f"| {entry['role']} | {features} |\n")
                  fh.write('\n')
          PY
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Gitleaks
        run: |
          set -eo pipefail
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz \
            -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo install gitleaks /usr/local/bin/gitleaks
      - name: Scan working tree for secrets
        run: |
          set -eo pipefail
          gitleaks detect --no-git --source . --config .gitleaks.toml --redact --no-banner
      - name: Scan git history for secrets
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_BASE_REF: ${{ github.event.pull_request.base.ref || '' }}
          GITLEAKS_HISTORY_RANGE: ${{ github.event_name == 'pull_request' && format('{0}..{1}', github.event.pull_request.base.sha, github.event.pull_request.head.sha) || (github.event_name == 'push' && format('{0}..{1}', github.event.before, github.sha) || '') }}
        run: |
          set -eo pipefail
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ] && [ -n "$PR_BASE_REF" ]; then
            git fetch --no-tags --prune --depth=0 origin "$PR_BASE_REF"
          fi
          LOG_OPTS="--no-merges"
          if [ -n "$GITLEAKS_HISTORY_RANGE" ] && git rev-list $GITLEAKS_HISTORY_RANGE >/dev/null 2>&1; then
            LOG_OPTS="$LOG_OPTS $GITLEAKS_HISTORY_RANGE"
          else
            LOG_OPTS="$LOG_OPTS --max-count=200"
          fi
          gitleaks detect --source . --config .gitleaks.toml --redact --no-banner --log-opts="$LOG_OPTS"
  tests:
    needs: node-test-matrix
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
    strategy:
      matrix:
        include: ${{ fromJson(needs.node-test-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest psycopg-binary
      - name: Run tests
        env:
          NODE_ROLE: ${{ matrix.role }}
          NODE_FEATURES: ${{ matrix.features }}
        run: pytest -q

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

  check-migrations:
    needs: node-test-matrix
    if: github.event_name == 'push' || needs.node-test-matrix.outputs.database_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Check for missing migrations
        run: |
          python manage.py makemigrations --check --dry-run --noinput

  env-refresh:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run env refresh
        run: ./env-refresh.sh --clean

  ui-screenshots:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Firefox
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox firefox-geckodriver
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Run screenshot specs
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          python scripts/ci/run_screenshots.py --base-ref "${GITHUB_BASE_REF}" --output-dir artifacts/ui-screens $(if [ "${GITHUB_EVENT_NAME}" != "pull_request" ]; then echo "--run-all"; fi)
      - name: Upload screenshot artefacts
        uses: actions/upload-artifact@v3
        with:
          name: ui-screenshots
          path: artifacts/ui-screens

