# Generated by Django 5.2.4 on 2025-09-14 01:52

import django.contrib.auth.models
import django.db.models.deletion
import post_office.fields
import post_office.models
import post_office.settings
import post_office.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0013_user_data_field"),
        ("nodes", "0003_user_data_field"),
    ]

    operations = [
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "from_email",
                    models.CharField(
                        max_length=254,
                        validators=[post_office.validators.validate_email_with_name],
                        verbose_name="Email From",
                    ),
                ),
                (
                    "to",
                    post_office.fields.CommaSeparatedEmailField(
                        blank=True, verbose_name="Email To"
                    ),
                ),
                (
                    "cc",
                    post_office.fields.CommaSeparatedEmailField(
                        blank=True, verbose_name="Cc"
                    ),
                ),
                (
                    "bcc",
                    post_office.fields.CommaSeparatedEmailField(
                        blank=True, verbose_name="Bcc"
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=989, verbose_name="Subject"
                    ),
                ),
                ("message", models.TextField(blank=True, verbose_name="Message")),
                (
                    "html_message",
                    models.TextField(blank=True, verbose_name="HTML Message"),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "sent"),
                            (1, "failed"),
                            (2, "queued"),
                            (3, "requeued"),
                        ],
                        db_index=True,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "recipient_delivery_status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (10, "Accepted"),
                            (20, "Delivered"),
                            (30, "Opened"),
                            (40, "Clicked"),
                            (50, "Deferred"),
                            (60, "Soft Bounced"),
                            (70, "Hard Bounced"),
                            (80, "Spam Complaint"),
                            (90, "Unsubscribed"),
                        ],
                        null=True,
                        verbose_name="Recipient Delivery Status",
                    ),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(0, "low"), (1, "medium"), (2, "high"), (3, "now")],
                        null=True,
                        verbose_name="Priority",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("last_updated", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "scheduled_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="The scheduled sending time",
                        null=True,
                        verbose_name="Scheduled Time",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Email won't be sent after this timestamp",
                        null=True,
                        verbose_name="Expires",
                    ),
                ),
                (
                    "message_id",
                    models.CharField(
                        editable=False,
                        max_length=255,
                        null=True,
                        verbose_name="Message-ID",
                    ),
                ),
                (
                    "number_of_retries",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "headers",
                    models.JSONField(blank=True, null=True, verbose_name="Headers"),
                ),
                (
                    "context",
                    models.JSONField(blank=True, null=True, verbose_name="Context"),
                ),
                (
                    "backend_alias",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=64,
                        verbose_name="Backend alias",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email",
                "verbose_name_plural": "Emails",
            },
        ),
        migrations.CreateModel(
            name="EmailCollector",
            fields=[],
            options={
                "verbose_name": "Email Collector",
                "verbose_name_plural": "Email Collectors",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.emailcollector",),
        ),
        migrations.CreateModel(
            name="EmailInbox",
            fields=[],
            options={
                "verbose_name": "Email Inbox",
                "verbose_name_plural": "Email Inboxes",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.emailinbox",),
        ),
        migrations.CreateModel(
            name="EmailOutbox",
            fields=[],
            options={
                "verbose_name": "Email Outbox",
                "verbose_name_plural": "Email Outboxes",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("nodes.emailoutbox",),
        ),
        migrations.CreateModel(
            name="WorkgroupChatProfile",
            fields=[],
            options={
                "verbose_name": "Chat Profile",
                "verbose_name_plural": "Chat Profiles",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.chatprofile",),
        ),
        migrations.CreateModel(
            name="WorkgroupReleaseManager",
            fields=[],
            options={
                "verbose_name": "Release Manager",
                "verbose_name_plural": "Release Managers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.releasemanager",),
        ),
        migrations.CreateModel(
            name="WorkgroupSecurityGroup",
            fields=[],
            options={
                "verbose_name": "Security Group",
                "verbose_name_plural": "Security Groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.securitygroup",),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        storage=post_office.settings.get_file_storage,
                        upload_to=post_office.models.get_upload_path,
                        verbose_name="File",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The original filename",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                ("mimetype", models.CharField(blank=True, default="", max_length=255)),
                (
                    "headers",
                    models.JSONField(blank=True, null=True, verbose_name="Headers"),
                ),
                (
                    "emails",
                    models.ManyToManyField(
                        related_name="attachments",
                        to="post_office.email",
                        verbose_name="Emails",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attachment",
                "verbose_name_plural": "Attachments",
            },
        ),
        migrations.CreateModel(
            name="EmailTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g: 'welcome_email'",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of this template.",
                        verbose_name="Description",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "subject",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[post_office.validators.validate_template_syntax],
                        verbose_name="Subject",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True,
                        validators=[post_office.validators.validate_template_syntax],
                        verbose_name="Content",
                    ),
                ),
                (
                    "html_content",
                    models.TextField(
                        blank=True,
                        validators=[post_office.validators.validate_template_syntax],
                        verbose_name="HTML content",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Render template in alternative language",
                        max_length=12,
                        verbose_name="Language",
                    ),
                ),
                (
                    "default_template",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translated_templates",
                        to="post_office.emailtemplate",
                        verbose_name="Default template",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Template",
                "verbose_name_plural": "Email Templates",
                "ordering": ["name"],
                "unique_together": {("name", "language", "default_template")},
            },
        ),
        migrations.AddField(
            model_name="email",
            name="template",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="post_office.emailtemplate",
                verbose_name="Email template",
            ),
        ),
        migrations.CreateModel(
            name="Log",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "sent"),
                            (1, "failed"),
                            (10, "Accepted"),
                            (20, "Delivered"),
                            (30, "Opened"),
                            (40, "Clicked"),
                            (50, "Deferred"),
                            (60, "Soft Bounced"),
                            (70, "Hard Bounced"),
                            (80, "Spam Complaint"),
                            (90, "Unsubscribed"),
                        ],
                        verbose_name="Status",
                    ),
                ),
                (
                    "exception_type",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Exception type"
                    ),
                ),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "email",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="post_office.email",
                        verbose_name="Email address",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log",
                "verbose_name_plural": "Logs",
            },
        ),
        migrations.CreateModel(
            name="EmailLog",
            fields=[],
            options={
                "verbose_name": "Email Log",
                "verbose_name_plural": "Email Logs",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("post_office.log",),
        ),
    ]
